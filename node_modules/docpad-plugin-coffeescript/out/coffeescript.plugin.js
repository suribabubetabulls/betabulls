// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports = function(BasePlugin) {
    var CoffeescriptPlugin;
    return CoffeescriptPlugin = (function(_super) {
      __extends(CoffeescriptPlugin, _super);

      function CoffeescriptPlugin() {
        return CoffeescriptPlugin.__super__.constructor.apply(this, arguments);
      }

      CoffeescriptPlugin.prototype.name = 'coffeescript';

      CoffeescriptPlugin.prototype.config = {
        compileOptions: {}
      };

      CoffeescriptPlugin.prototype.render = function(opts) {
        var coffee, compileOptions, err, file, fileFullPath, finish, inExtension, key, literate, outExtension, start, value, _ref;
        inExtension = opts.inExtension, outExtension = opts.outExtension, file = opts.file;
        literate = false;
        if (((inExtension === 'coffee' || inExtension === 'litcoffee') && (outExtension === 'js' || outExtension === null)) || ((inExtension === 'md' || inExtension === 'markdown') && outExtension === 'js' && (literate = true))) {
          coffee = require('coffee-script');
          fileFullPath = file.get('fullPath');
          compileOptions = {
            filename: fileFullPath,
            literate: literate || coffee.helpers.isLiterate(fileFullPath)
          };
          _ref = this.getConfig().compileOptions;
          for (key in _ref) {
            if (!__hasProp.call(_ref, key)) continue;
            value = _ref[key];
            if (compileOptions[key] == null) {
              compileOptions[key] = value;
            }
          }
          try {
            opts.content = coffee.compile(opts.content, compileOptions);
          } catch (_error) {
            err = _error;
            if (err.location) {
              start = "" + err.location.first_line + ":" + err.location.first_column;
              finish = "" + err.location.last_line + ":" + err.location.last_column;
              err.message += " at " + fileFullPath + ":" + start;
              if (finish !== start) {
                err.message += " to " + finish;
              }
            }
            return err;
          }
        }
      };

      return CoffeescriptPlugin;

    })(BasePlugin);
  };

}).call(this);
